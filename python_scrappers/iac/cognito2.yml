AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation para configurar triggers y funciones Lambda para Cognito'

Parameters:
  CognitoUserPoolID:
    Type: String
    Description: "ID del User Pool de Cognito"

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaCognitoPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminAddUserToGroup
                Resource: 
                  - !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolID}

  PostConfirmationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json

          def handler(event, context):
              user_pool_id = event['userPoolId']
              user_name = event['userName']
              
              client = boto3.client('cognito-idp')
              
              response = client.admin_add_user_to_group(
                  UserPoolId=user_pool_id,
                  Username=user_name,
                  GroupName='User'
              )
              
              return event
      Runtime: python3.8
      Timeout: 60

  UpdateUserPoolWithTrigger:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolId: !Ref CognitoUserPoolID
      LambdaConfig:
        PostConfirmation: !GetAtt PostConfirmationFunction.Arn

Outputs:
  PostConfirmationFunctionArn:
    Description: 'ARN of the Post Confirmation Lambda Function'
    Value: !GetAtt PostConfirmationFunction.Arn
